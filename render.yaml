services:
  - type: web
    name: docs-app
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: hypercorn --bind 0.0.0.0:$PORT --workers 2 --keep-alive 120 --graceful-timeout 60 --access-log - --error-log - --log-level DEBUG app:app
    healthCheckPath: /health
    healthCheckTimeout: 100
    autoDeploy: true
    disk:
      name: docsapp-data
      mountPath: /data/docsapp
      sizeGB: 1
    prebootCommand: |
      echo "=== Starting Preboot ==="
      echo "Creating directories..."
      mkdir -p /data/docsapp/db /data/docsapp/logs /data/docsapp/data /etc/secrets
      python -c "
      import os
      import json
      import sys
      
      # Create directories
      print('Creating and verifying directories...')
      directories = [
          '/data/docsapp/db',
          '/data/docsapp/logs',
          '/data/docsapp/data',
          '/etc/secrets',
          '/app'
      ]
      
      for directory in directories:
          try:
              os.makedirs(directory, exist_ok=True)
              os.chmod(directory, 0o755)  # rwxr-xr-x
              print(f'Created/verified directory: {directory}')
              print(f'Contents: {os.listdir(directory)}')
          except Exception as e:
              print(f'Error with directory {directory}: {str(e)}')
      
      # Get credentials from environment
      oauth_creds = os.environ.get('OAUTH_CREDENTIALS')
      google_creds = os.environ.get('GOOGLE_CREDENTIALS')
      
      print('OAuth credentials length:', len(oauth_creds) if oauth_creds else 'Not found')
      
      # Write OAuth credentials
      if oauth_creds:
          try:
              # Validate JSON format
              json.loads(oauth_creds)
              credentials_path = '/app/credentials.json'
              with open(credentials_path, 'w') as f:
                  f.write(oauth_creds)
              os.chmod(credentials_path, 0o644)  # rw-r--r--
              print('Successfully wrote credentials.json')
              print('File contents:')
              with open(credentials_path, 'r') as f:
                  print(f.read())
              print(f'File permissions: {oct(os.stat(credentials_path).st_mode)[-3:]}')
          except Exception as e:
              print('Error writing credentials.json:', str(e))
              sys.exit(1)
      else:
          print('ERROR: OAUTH_CREDENTIALS not found in environment')
          sys.exit(1)
      
      # Write Google credentials
      if google_creds:
          try:
              google_creds_path = '/etc/secrets/google-credentials.json'
              with open(google_creds_path, 'w') as f:
                  f.write(google_creds)
              os.chmod(google_creds_path, 0o644)  # rw-r--r--
              print('Successfully wrote google-credentials.json')
              print(f'File permissions: {oct(os.stat(google_creds_path).st_mode)[-3:]}')
          except Exception as e:
              print('Error writing google-credentials.json:', str(e))
              sys.exit(1)
      else:
          print('ERROR: GOOGLE_CREDENTIALS not found in environment')
          sys.exit(1)
      "
      
      echo "=== Preboot Complete ==="
    envVars:
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: WHATSAPP_API_VERSION
        sync: false
      - key: WHATSAPP_PHONE_NUMBER_ID
        sync: false
      - key: WHATSAPP_ACCESS_TOKEN
        sync: false
      - key: WHATSAPP_BUSINESS_ACCOUNT_ID
        sync: false
      - key: WHATSAPP_VERIFY_TOKEN
        sync: false
      - key: OAUTH_REDIRECT_URI
        value: https://docsapp-20br.onrender.com/oauth2callback
      - key: GOOGLE_CLOUD_PROJECT
        sync: false
      - key: GOOGLE_CLOUD_LOCATION
        value: us-central1
      - key: GOOGLE_APPLICATION_CREDENTIALS
        value: /etc/secrets/google-credentials.json
      - key: DEBUG
        value: "true"
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: OAUTHLIB_INSECURE_TRANSPORT
        value: "1"
      - key: DATABASE_URL
        fromService:
          name: docsapp-postgres
          type: postgres
          property: connectionString
      - key: REDIS_URL
        value: "redis://red-cv9vcatumphs73ac0uag:6379"
    secrets:
      - key: GOOGLE_CREDENTIALS
        name: google-credentials
      - key: OAUTH_CREDENTIALS
        name: oauth-credentials

  # PostgreSQL Database
  - type: postgres
    name: docsapp-postgres
    plan: starter # $7/month, 1GB storage
    ipAllowList: [] # Only allow internal connections
    maxmemoryPolicy: noeviction

  # Redis Cache
  - type: redis
    name: docsapp-redis
    plan: free # Free tier, 25MB storage
    ipAllowList: [] # Only allow internal connections
    maxmemoryPolicy: volatile-lru # Evict least recently used keys with expiration 