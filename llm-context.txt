# DocsApp - WhatsApp-based Document Management System

## Project Overview
DocsApp is a WhatsApp-based document management system that allows users to store, retrieve, and query documents through WhatsApp. The system integrates with Google Drive for storage and uses advanced RAG (Retrieval Augmented Generation) for document processing and question answering.

## Core Features
1. Document Management
   - Upload documents through WhatsApp
   - Store documents in Google Drive
   - List stored documents
   - Delete documents
   - Retrieve documents by query

2. Document Processing
   - Text extraction from various file types (PDF, text files)
   - Document chunking and embedding generation
   - Vector search for relevant content
   - RAG-based question answering

3. Authentication & Authorization
   - Google OAuth integration
   - Persistent user sessions
   - Secure token management

4. Natural Language Understanding
   - Gemini-powered intent classification
   - Context-aware response generation
   - Direct execution of identified intents
   - Fallback to rule-based detection

## Technical Architecture

### Components
1. Web Server (Flask/Hypercorn)
   - Handles WhatsApp webhooks
   - Manages OAuth callbacks
   - Serves health checks

2. Document Processing Pipeline
   - RAGProcessor: Handles document processing
   - Document AI integration for PDF processing
   - PyPDF2 as fallback for text extraction
   - Vector embeddings for semantic search

3. Storage Layer
   - Google Drive: Document storage
   - Google Cloud Storage: Temporary storage
   - SQLite: User data and document metadata
   - Vector Store: Document embeddings

4. Natural Language Processing
   - IntentClassifier: Gemini-based intent detection
   - ResponseGenerator: Context-aware responses
   - Command mapping and parameter extraction
   - User context tracking

### Key Files and Modules
1. app.py
   - Main application entry point
   - Route handlers
   - Webhook processing

2. models/
   - docs_app.py: Core document management logic
   - rag_processor.py: Compatibility wrapper for RAG implementation
   - intent_classifier.py: Gemini-powered intent classification
   - response_generator.py: Natural language response generation
   - rag/: Modular RAG processor implementation
     - processor.py: Main RAG coordinator
     - document_processor.py: Document extraction and processing
     - embedding_generator.py: Embedding generation with fallbacks
     - text_chunker.py: Text chunking and preparation
     - vector_store.py: Vector storage and retrieval
     - llm_interface.py: Language model interfaces
     - compatibility.py: Backward compatibility layer
   - database.py: Database models and connection management
   - user_state.py: User session and authentication management

3. routes/handlers/
   - whatsapp_handler.py: Compatibility wrapper for WhatsApp processing
   - whatsapp/: Modular WhatsApp handler implementation
     - handler.py: Main WhatsApp message coordinator
     - command_processor.py: Command processing with intent detection
     - document_processor.py: Document handling
     - message_sender.py: Message sending with deduplication
     - deduplication.py: Message deduplication

## Recent Updates

1. WhatsApp Message Handling Improvements
   - Added read receipt handling to mark messages as read
   - Implemented system message filtering for messages like "Fetch update"
   - Improved deduplication to prevent duplicate messages
   - Fixed issues with unexpected "I don't understand" messages

2. Gemini-Powered Intent Classification
   - Added IntentClassifier using Google's Gemini model
   - Implemented fallback to Gemini when rule-based detection fails
   - Added parameter extraction from natural language queries
   - Set confidence threshold for intent classification

3. Natural Language Response Generation
   - Added ResponseGenerator using Google's Gemini model
   - Implemented context-aware responses based on user history
   - Added tracking of user context (document count, previous commands)
   - Improved error handling and fallbacks

4. Direct Intent Execution
   - Updated command processor to execute identified intents directly
   - Eliminated need for users to use exact command syntax
   - Improved user experience with more natural interactions
   - Maintained backward compatibility with existing commands

## Development History

### Major Features Implemented
1. Basic Document Management
   - Google Drive integration
   - File upload/download
   - Document listing and deletion

2. RAG Implementation
   - Document processing pipeline
   - Text extraction and chunking
   - Embedding generation
   - Question answering

3. Authentication System
   - Google OAuth flow
   - Token persistence
   - Session management

4. WhatsApp Integration
   - Webhook handling
   - Message processing
   - Command parsing
   - File handling

### Bug Fixes and Improvements

1. Document Processing
   - Added fallback to PyPDF2 when Document AI fails
   - Improved text extraction with multiple encoding attempts
   - Enhanced error handling in processing pipeline
   - Added detailed logging for debugging

2. Authentication
   - Fixed token refresh mechanism
   - Improved error handling in OAuth flow
   - Added token validation checks

3. Data Persistence
   - Implemented persistent storage using mounted disk
   - Fixed database path issues
   - Ensured user data persists across deployments
   - Maintained document records between sessions

4. Error Handling
   - Added comprehensive error logging
   - Improved user feedback for failures
   - Enhanced debugging capabilities

5. Deduplication
   - Implemented robust message deduplication
   - Added document processing deduplication
   - Enhanced message sending deduplication
   - Automatic cleanup of tracking data

### Recent Conversations and Updates

1. Circular Import Resolution
   - Problem: Circular imports between WhatsAppHandler and RAGHandler
   - Solution:
     - Relocated imports within methods that require them
     - Used dependency injection to break circular dependencies
     - Simplified initialization to ensure a single instance is used

2. Modular Restructuring
   - Refactored RAG processor into modular components
   - Refactored WhatsApp handler into modular components
   - Added compatibility layers for backward compatibility
   - Improved error handling and logging

3. Gemini Model Updates
   - Updated language model initialization to use Gemini 2.0
   - Added fallback to Gemini 1.0 when 2.0 is unavailable
   - Enhanced error handling for model initialization

4. Deduplication Enhancements
   - Implemented robust message deduplication
   - Added document processing deduplication
   - Enhanced message sending deduplication
   - Added cleanup mechanisms to prevent memory leaks

## Deployment

### Environment
- Platform: Render
- Runtime: Python 3.11
- Web Service: Hypercorn

### Configuration
1. Persistent Storage
   - Mounted disk at /data/docsapp
   - Size: 1GB
   - Contains:
     - /db: Database files
     - /logs: Application logs
     - /data: Temporary data
     - /temp: Temporary files

2. Environment Variables
   - WhatsApp API credentials
   - Google Cloud credentials
   - OAuth configuration
   - Application settings

### Monitoring
- Health check endpoint
- Detailed logging
- Error tracking
- Performance monitoring

## Command Interface

1. Document Management
   - /list: Show stored documents
   - /delete <number>: Delete document
   - /find <query>: Search documents
   - /ask <question>: Query documents

2. Authentication
   - Initial OAuth flow
   - Automatic token refresh
   - Session management

## Future Improvements

1. Performance
   - Optimize document processing
   - Improve response times
   - Enhance caching

2. Features
   - Batch document processing
   - Advanced search capabilities
   - Document summarization
   - Multi-language support

3. Reliability
   - Enhanced error recovery
   - Better failure handling
   - Improved monitoring

4. User Experience
   - Better progress indicators
   - More detailed feedback
   - Improved error messages

## Current State and Active Issues
1. Data Persistence Implementation
   - Recently implemented persistent storage on Render
   - Using mounted disk at /data/docsapp (1GB)
   - Database files now stored in persistent location
   - Need to verify persistence across multiple deployments

2. Active Issues
   - Document processing time varies (30s to 2min based on file type)
   - Users receive two responses for /ask command (processing message + answer)
   - Need to ensure Google Drive folder persistence across sessions
   - Duplicate document processing notifications in some cases

3. Last Working State
   - Persistent storage implementation complete
   - Database migration to persistent storage done
   - User authentication flow working
   - Document processing pipeline operational
   - Modular RAG processor implementation complete
   - Modular WhatsApp handler implementation complete

## Critical Implementation Details

### RAG Processing Flow
1. Document Upload
   ```
   WhatsApp -> Temp Storage -> Google Drive -> Document Processing
   ```

2. Processing Pipeline
   ```
   Document -> Text Extraction (Document AI/PyPDF2) -> Chunking -> 
   Embedding Generation -> Vector Storage -> Ready for Querying
   ```

3. Query Processing
   ```
   Question -> Embedding -> Vector Search -> 
   Context Retrieval -> RAG Generation -> Response
   ```

### Deduplication Mechanisms
1. Message Deduplication
   ```
   Incoming Message -> Extract Message ID and Sender -> 
   Check Against Processed Messages -> Process Only If New
   ```

2. Document Processing Deduplication
   ```
   Document Upload -> Create Document Key (User+FileID) -> 
   Check Against Processed Documents -> Process Only If New
   ```

3. Message Sending Deduplication
   ```
   Outgoing Message -> Create Message Key (User+Content) -> 
   Check Against Sent Messages -> Send Only If Not Recent
   ```

### Database Schema
1. Users Table
   ```sql
   CREATE TABLE users (
       phone TEXT PRIMARY KEY,
       google_authorized BOOLEAN DEFAULT FALSE,
       tokens TEXT,
       last_refresh TIMESTAMP DEFAULT CURRENT_TIMESTAMP
   )
   ```

2. Documents Table
   ```sql
   CREATE TABLE documents (
       id INTEGER PRIMARY KEY,
       user_phone TEXT,
       file_id TEXT,
       filename TEXT,
       description TEXT,
       upload_date TIMESTAMP,
       mime_type TEXT,
       data_store_id TEXT,
       document_id TEXT
   )
   ```

### Critical Environment Variables
```
WHATSAPP_API_VERSION=v22.0
WHATSAPP_PHONE_NUMBER_ID=[configured]
WHATSAPP_ACCESS_TOKEN=[configured]
WHATSAPP_BUSINESS_ACCOUNT_ID=[configured]
GOOGLE_CLOUD_PROJECT=docsapp-447706
GOOGLE_CLOUD_LOCATION=us-central1
OAUTH_REDIRECT_URI=https://docsapp-20br.onrender.com/oauth2callback
```

### Current File Structure
```
/
├── app.py
├── config.py
├── models/
│   ├── database.py
│   ├── docs_app.py
│   ├── rag_processor.py
│   ├── intent_classifier.py
│   ├── response_generator.py
│   ├── rag/
│   │   ├── __init__.py
│   │   ├── processor.py
│   │   ├── document_processor.py
│   │   ├── embedding_generator.py
│   │   ├── text_chunker.py
│   │   ├── vector_store.py
│   │   ├── llm_interface.py
│   │   └── compatibility.py
│   └── user_state.py
├── routes/
│   └── handlers/
│       ├── auth_handler.py
│       ├── document_handler.py
│       ├── rag_handler.py
│       ├── whatsapp_handler.py
│       └── whatsapp/
│           ├── __init__.py
│           ├── handler.py
│           ├── message_sender.py
│           ├── document_processor.py
│           ├── command_processor.py
│           └── deduplication.py
└── render.yaml
```

### Known Limitations
1. Processing Times
   - PDF files: 30-60 seconds
   - Large documents: up to 2 minutes
   - Text files: 15-30 seconds

2. Rate Limits
   - Document AI: 1 request/second
   - WhatsApp API: 80 messages/second
   - Google Drive API: 1000 requests/100 seconds

3. File Support
   - PDF (primary support)
   - Text files (full support)
   - Other formats (not yet implemented)

## Immediate Tasks
1. Verify persistence across deployments
2. Optimize document processing time
3. Consider combining processing message with final answer
4. Implement better progress tracking
5. Enhance deduplication for document processing notifications

## Testing Instructions
1. Document Upload Test
   ```
   1. Send document via WhatsApp
   2. Verify upload confirmation
   3. Check /list command
   4. Verify document in Google Drive
   ```

2. Query Test
   ```
   1. Use /ask command
   2. Verify processing message
   3. Check final response
   4. Validate source citations
   ```

3. Authentication Test
   ```
   1. Start new chat
   2. Complete OAuth flow
   3. Verify persistent login
   4. Check document access
   ``` 